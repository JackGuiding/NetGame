==== 依赖库 ====
>> JSONParser
用途: 数据序列化
地址: https://github.com/zanders3/json

>> Telepathy
用途: TCP 网络连接
地址: https://github.com/MirrorNetworking/Telepathy

>> ParrelSync
用途: 单电脑多开Unity, 用于多开Client
地址: https://github.com/VeriorPies/ParrelSync

==== 教学 ====
>> Part1: 连接与收发数据
Server:
1. new -> Start
2. Tick
3. Binding Events
4. Stop

Client:
1. new -> Connect
2. Tick
3. Binding Events
4. Stop

>> Part2: 发什么?才能让对方知意图
1. 增加一个前缀: int messageTypeID
2. 增加长度: int length
3. 才解析

发送时数据烘焙:
    - 原始数据(结构体) -> 序列化(A库) -> byte[]
    - 原始数据(结构体) -> string -> byte[]
    - 原始数据(结构体) -> byte[]
接收时数据烘焙:
    - byte[] -> 反序列化(一定用A库) -> 原始数据(结构体)
    - byte[] -> 原始数据(结构体)

>> Part3: 广播
for 所有 client -> server.Send

>> Part4: 小球

>> DEBUG
发了什么?: byte[] 字节数

==== 网络同步 ====
状态同步-客户端鉴权(闹着玩才用的方案): 我说我在哪里, 大家就信我在哪里, 无法防作弊

状态同步-服务端运算(MMORPG-FF14/WOW):
    客户端只发移动指令(按W,代表向上或向前), 服务端存所有人坐标, 运算指令+坐标=结果 -> 广播

帧同步-服务端广播指令-客户端运算结果(LOL/PUBG): 有人按W, 所有人的电脑都按照"此人在某帧按下W来运算"
    初始坐标（0，0） -> 移速是0.1/帧 -> 某一帧按W -> 结果一定是(0, 0.1)

==== 规范 ====
Request(Req): 客户端 发-> 服务端
Response(Res): 服务端 单发-> 客户端
Broadcast(Bro): 服务端 广播-> 客户端

==== 扩展 ====
逻辑(帧)表现(帧)分离
网络(帧)本地(帧)分离